!SLIDE cover

h1. Ruby Code Performance Tweaks

* <%= Date.today.to_s %>
* Kurt Stephens - kurt@enovafinancial.com
* Enova Financial
* "":http://kurtstephens.com/pub/ruby/ruby_code_tweaks/
* "":http://github.com/kstephens/ruby_code_tweaks/

!SLIDE

h1. Why bother?

* Layers.
* Common Ruby idioms are (sometimes):
** Concise
** Elegant
** Performant
* Ruby platforms and language versions perform differently with the same code.

!SLIDE

h1. Layers 

* Decomposition
* Reuse, Reliability
* Layer Pyramids become Dependency Funnels
* Lower layers are bottlenecks, until they are tuned.

!SLIDE

h1. Pyramid

<object data="image/code_pyramid.svg" />

!SLIDE

h1. Funnel

<object data="image/code_funnel.svg" />

!SLIDE

h1. Ruby Platforms

<% platforms = Platform.instances_enabled %>
<% platforms.each do | plat | %>
* <%= plat.name %>
<%= plat.details %>
<% end %>

!SLIDE

h1. Problems

* Small problems become big problems.
* Common idioms are born from common problems.

!SLIDE

h1. Idioms

h2. make friends with: 
* programmers - efficiency, style
* platforms - implementation techniques
* algorithms - O(1), O(N), O(log N), O(N ^ 2)
* space - structure, allocation and garbage collection costs
* time - is money

h2. The best performing idiom might:
* not be the most elegant idiom.
* might not be the most intuitive idiom.
* might not work best for your platform.

!SLIDE

h1. Thoughts

h2. These Benchmarks:
* very low-level, narrow and specific.
* will not extrapolate to represent your application's overall performance.
* not comprehensive or real-world comparisons of different Ruby platforms.
* may be due to misconfiguration.

h2. Stuff gets better:
* Ruby platforms get better - benchmark results could change tomorrow.
* Contribute.

h2. Do Your Research
* Kill your own myths - see what works for you.
* Fix code before blaming Ruby - clean, profiled code works best everywhere.
* Measure, then measure again.

!SLIDE

h1. Common Solution Domain Problems

<% problems = Problem.instances_enabled %>
<% problems[0..8].each do | prob | %>
* <%= prob.name %>: <%= prob.description %> 
<% end %>


!SLIDE

h1. Common Solution Domain Problems

<% problems = Problem.instances_enabled %>
<% problems[8..-1].each do | prob | %>
* <%= prob.name %>: <%= prob.description %> 
<% end %>


<% problems.each do | prob | %>

!SLIDE

h1. Problem: <%= prob.name %>

<%= prob.description %>

@@@ ruby
<%= prob.setup unless prob.example %>
<%= case
when x = prob.example
  x
else
  prob.around.gsub(/\b__SOLUTION__\b/, '# SOLUTION?')
end
%>
@@@
<%= prob.notes %>

h2. Solutions
<% prob.solutions.each do | sol | %>
* @<%= sol.name %>@
<% end %>

<% prob.solutions.each do | sol | %>

!SLIDE

h1. <%= prob.name %>

h2. @<%= sol.name %>@

@@@ ruby
<%= prob.setup %>
<%= sol.example || sol.code_block %>
@@@

<%= sol.notes %>

<% end %>

!SLIDE

h1. Results

* n = <%= prob.n * ', ' %>
* Test script: "":relative:<%= prob.problem_file %>
* Test output: "":relative:<%= prob.output_file %>
* Measurements by platform: <% prob.platforms.each do | plat | %>
** <%= plat.name %>: "":relative:<%= prob.measurement_file(plat) %> 
<% end %>


<% if prob.show_platform_graphs %>
<% platforms.each do | plat | %>
!SLIDE

!<%= prob.graph_image(plat) %>!

<% end %>
<% end %>

<% if prob.show_solution_graphs %>
<% prob.solutions.each do | sol | %>
!SLIDE

!<%= prob.graph_image(sol) %>!

<% end %>
<% end %>

<% if prob.synopsis %>
!SLIDE

h1. Summary: <%= prob.name %>

<%= prob.synopsis %>
<% end %>

<% end %>

!SLIDE

h1. More Info

http://github.com/kstephens/ruby_code_tweaks



